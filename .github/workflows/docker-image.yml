name: Build and Push MultiTalk Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to registry'
        required: true
        default: 'true'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/multitalk

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Free up disk space
      run: |
        # Show space before cleanup
        echo "=== Disk space before cleanup ==="
        df -h
        
        # Remove packages safely (ignore if not found)
        echo "=== Removing unnecessary packages ==="
        sudo apt-get remove -y --purge $(dpkg-query -Wf '${Package}\n' | grep -E '^(dotnet-|llvm-|mongodb-|mysql-|azure-cli|google-cloud-sdk|hhvm|google-chrome-stable|firefox|powershell|mono-devel)' | head -20) || true
        
        # Clean package cache
        sudo apt-get autoremove -y || true
        sudo apt-get clean || true
        sudo apt-get autoclean || true
        
        # Remove large directories safely
        echo "=== Removing large directories ==="
        sudo rm -rf /usr/share/dotnet || true
        sudo rm -rf /usr/local/lib/android || true
        sudo rm -rf /opt/ghc || true
        sudo rm -rf /opt/hostedtoolcache/CodeQL || true
        sudo rm -rf /imagegeneration || true
        sudo rm -rf /opt/az || true
        sudo rm -rf /opt/microsoft || true
        sudo rm -rf /usr/local/.ghcup || true
        sudo rm -rf /usr/local/share/boost || true
        sudo rm -rf /usr/local/graalvm || true
        sudo rm -rf /usr/local/share/vcpkg || true
        sudo rm -rf /usr/local/share/chromium || true
        sudo rm -rf /opt/mssql-tools || true
        sudo rm -rf /etc/skel/.dotnet || true
        
        # Clean Docker system
        docker system prune -af --volumes || true
        
        # Clean apt cache
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /var/cache/apt/archives/*
        
        # Show space after cleanup
        echo "=== Disk space after cleanup ==="
        df -h

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: false
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Test Docker image
      run: |
        # Test if image was built successfully
        docker images
        
        # Run basic container test (without GPU)
        docker run --rm -e CUDA_VISIBLE_DEVICES="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -c "import torch; print('PyTorch version:', torch.__version__); print('CUDA available:', torch.cuda.is_available())"

    - name: Push Docker image
      if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_to_registry == 'true')
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Generate artifact attestation
      if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_to_registry == 'true')
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true
